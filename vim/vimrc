set nocompatible

" automatically install vim-plug if it's not present
if empty(glob('~/.config/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" project/folder navigation
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'

" UI
Plug 'vim-airline/vim-airline'
Plug 'jmarquis/vim-airline-ayu-custom'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'ayu-theme/ayu-vim'
Plug 'christoomey/vim-tmux-navigator'

" git
Plug 'tpope/vim-fugitive' " git bindings
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-rhubarb' " github bindings

" editing
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'terryma/vim-multiple-cursors'
Plug 'tweekmonster/wstrip.vim' " strips whitespace
Plug 'cohama/lexima.vim'

" misc
Plug 'w0rp/ale'
Plug 'powerman/vim-plugin-autosess'
" Plug 'sheerun/vim-polyglot' " lotsa language support
Plug 'blueyed/smarty.vim'

Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'liuchengxu/vista.vim'
Plug 'vim-vdebug/vdebug'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()

lua <<EOF
require 'nvim-treesitter.install'.compilers = { "gcc" }
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
  indent = {
    enable = true
  }
}
EOF

" coc-managed extensions
let g:coc_global_extensions = [
\  'coc-snippets',
\  'coc-tsserver',
\  'coc-phpls',
\  'coc-json',
\  'coc-css',
\  'coc-solargraph'
\]

" don't close buffers when switching
set hidden

" use comma as leader
let mapleader=","

" colorscheme setup
syntax on
set background=dark
set termguicolors
let ayucolor = "dark"
colorscheme ayu

" let the terminal set the bg
" this lets active windows have a different bgcolor
hi Normal guibg=None ctermbg=None

" cursorline only for active window
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" fancy cursorline colors per mode
hi CursorLine guibg=#171f26
autocmd InsertEnter * highlight CursorLine guibg=#000000
autocmd InsertLeave * highlight CursorLine guibg=#171f26 ctermbg=235

" use newer regex engine
set regexpengine=1

" basic editing/navigation preferences
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
filetype plugin indent on
set smartindent
set autoindent
set nowrap
set hlsearch
set number
set showmatch
set ignorecase
set smartcase
set smarttab
set noshowmode

" php
autocmd FileType php setl iskeyword+=$

" auto refresh files when changes are made outside of vim
set autoread

" always show status line
set laststatus=2

" enables the mouse
set mouse=a

" more undo'ing
set history=1000

" incrementally search/highlight as you're typing
set incsearch

" start scrolling when the cursor is five lines away from the edge of screen
set scrolloff=5
set sidescrolloff=5

" don't let the cursor go past the end of the line in normal mode
set ve=

" don't require .jsx extension to highlight jsx files
let g:jsx_ext_required = 0

" navigate visual lines
nnoremap j gj
nnoremap k gk

" navigate quickfix
nnoremap ]q :cnext<CR>
nnoremap [q :cprev<CR>
nnoremap ]Q :clast<CR>
nnoremap [Q :cfirst<CR>

" remap mark jumping
nnoremap ` '
nnoremap ~ `

" better split navigation bindings
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" bindings for fuzzy file finder
nnoremap <C-t> :Files<CR>
nnoremap <C-p> :Files<CR>

" more intuitive split opening
set splitbelow
set splitright

" trigger CursorHold events quicker
set updatetime=300

" don't give |ins-completion-menu| messages
set shortmess+=c

" show invisibles
set listchars=eol:¬,tab:>·,extends:>,precedes:<
set list
hi NonText ctermfg=7 guifg=#434c5d
hi SpecialKey ctermfg=7 guifg=#434c5d

" backspace past the beginning of the line
set backspace=indent,eol,start

" gui stuff
set guioptions=M
set guifont=Monaco:h10
set signcolumn=yes

" TODO: verify if this is still needed
if exists('$TMUX')
  let &t_SI = "\ePtmux;\e\e[5 q\e\\"
  let &t_EI = "\ePtmux;\e\e[2 q\e\\"
else
  let &t_SI = "\e[5 q"
  let &t_EI = "\e[2 q"
endif

" Needed for tmux and vim to play nice
" TODO: verify if this is still needed
nnoremap <silent> <ESC>OA <UP>
nnoremap <silent> <ESC>OB <DOWN>
nnoremap <silent> <ESC>OC <RIGHT>
nnoremap <silent> <ESC>OD <LEFT>
inoremap <silent> <ESC>OA <UP>
inoremap <silent> <ESC>OB <DOWN>
inoremap <silent> <ESC>OC <RIGHT>
inoremap <silent> <ESC>OD <LEFT>

" fix for exiting insert mode faster
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=10
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END

" live refactoring
set inccommand=nosplit

" keep selection when changing indentation
vnoremap < <gv
vnoremap > >gv

" fix for a weird JSX syntax highlighting bug
" TODO: verify if this is still needed
hi link xmlEndTag xmlTag
hi link htmlEndTag htmlTag

" alt + j/k to move lines down/up
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv


" PLUGIN SETTINGS

let g:lexima_enable_basic_rules = 1
let g:lexima_enable_newline_rules = 1
let g:lexima_enable_endwise_rules = 1

let g:wstrip_auto = 1

" indent guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#171f26 ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#1c252e ctermbg=234
let g:indent_guides_exclude_filetypes = ['help', 'terminal', 'fzf']

" simplify the nerdtree UI
let NERDTreeMinimalUI = 1

" open nerdtree with C-g
nnoremap <C-g> :NERDTreeToggle<Enter>

" reveal current file in nerdtree
nmap <leader>n :NERDTreeFind<CR>
nmap <leader>f :NERDTreeFind<CR>

" show hidden files in nerdtree
let NERDTreeShowHidden=1

" set up fzf to generate tags
set tags=.tags;
let g:fzf_tags_command = "ctags -R --exclude=.git --exclude=node_modules --exclude=vendor -f .tags"

" fzf bindings for buffers and tags
nnoremap ; :Buffers<CR>
nnoremap <Bar> :Tags<Enter>
nnoremap ' :BTags<Enter>
nnoremap <leader>h :BCommits<Enter>

" find file (advanced version of gf)
nmap <silent> <leader>gf :call fzf#vim#files('.', {'options': '-q '.shellescape(expand('<cfile>'))})<CR>

let $FZF_DEFAULT_OPTS=' --layout=reverse  --margin=1,4 --color=bg+:#28333f,info:#28333f'

let g:fzf_colors =
\ { 'fg':      ['fg', 'Comment'],
  \ 'bg':      ['bg', 'CursorLine'],
  \ 'hl':      ['fg', 'Normal'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'border':  ['bg', 'CursorLine'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
\ }

" use ripgrep for ack.vim
let g:ackprg = 'rg --vimgrep'

" don't open first result when ack-ing
cnoreabbrev Ack Ack!

" search word under cursor
nnoremap <leader>k :execute 'Ack! <cword>'<cr>

" highlight what we're acking for
let g:ackhighlight = 1

" disable built-in ruby linter because it kills the CPU
let g:ale_linters = {
\  'ruby': ['rubocop'],
\  'php': [],
\  'javascript': ['eslint'],
\  'javascriptreact': ['eslint']
\}

" use local rubocop
let g:ale_ruby_rubocop_executable = 'bundle'

" enable prettier
let g:ale_fixers = {
\  'javascript': ['prettier'],
\  'javascriptreact': ['prettier'],
\  'typescript': ['prettier'],
\  'typescriptreact': ['prettier'],
\}
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_pattern_options = {
\  '\.min\.js$': { 'ale_linters': [], 'ale_fixers': [] }
\}

" close nerdtree on exit so it isn't saved in the session
autocmd VimLeave * NERDTreeClose

" NERDCommenter mappings + settings
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv
let g:NERDSpaceDelims = 1

function! Readonly()
    let output = airline#util#wrap(airline#parts#readonly(),0)
    if output == ""
        return ""
    endif
    return "   " . output
endfunction

" simplify airline UI
function! AirlineInit()
  let g:airline_section_b = "%<%<%{airline#extensions#fugitiveline#bufname()}%m%#__accent_red#%{Readonly()}%#__restore__#"
  let g:airline_section_c = "%{airline#extensions#vista#currenttag()}"
  let g:airline_section_x = "%{FugitiveHead()}"
  let g:airline_section_y = "%l/%L"
  let g:airline_section_z = ""
endfunction
autocmd User AirlineAfterInit call AirlineInit()

let g:airline_inactive_collapse = 0
let g:airline_theme = 'ayu_custom'
let g:airline#extensions#vista#enabled = 1

" vista
let g:vista_default_executive = 'coc'
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

" closetag settings
let g:closetag_filenames = '*.html,*.erb,*.jsx,*.js'
let g:closetag_xhtml_filenames = '*.jsx,*.js'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'


" COC

" use tab, cr and esc for completion
inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#confirm() : "\<TAB>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <ESC> coc#pum#visible() ? coc#pum#cancel() : "\<ESC>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" map keys for navigating snippets
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

" Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> <leader>gd :call CocAction('jumpDefinition', 'sp')<CR>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" nmap <silent> ]c <Plug>(coc-diagnostic-next)
" nmap <silent> [c <Plug>(coc-diagnostic-prev)

" Pull up the last list
nnoremap <silent> <leader>l :CocListResume<CR>

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
" nmap <leader>ac  <Plug>(coc-codeaction)

" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
" command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
" command! -nargs=? Fold :call CocAction('fold', <f-args>)

hi CocHighlightText guibg=#666666
